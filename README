A no-allocation naive lempel-ziv-welch codec^H^H^H^H^H entropy coder.

FAQ:

Q: Why should I use your program when there are others out there that have
   better compression performance, are faster, or just easier to understand?
A: Ouch. :(

How to use:

To encode:

    extern int get_input_char(char *ch);
    extern void put_output_code(unsigned code);

    unsigned char ch_in;
    unsigned code_out;

    struct lzw_state enc;
    lzw_state_init(&enc);

    while(get_input_char(&ch_in))
        if(lzw_encode(&enc, ch_in, &code_out))
            put_output_code(code_out);
    lzw_encode_finish(&enc, &code_out);
    put_output_code(code_out);

Or to decode:

    extern int get_input_code(unsigned *code);
    extern void put_output_buf(unsigned char *buf_out, unsigned len);

    unsigned int code_in;
    unsigned char tempbuf[DICTSIZE], *temp_end = tempbuf + DICTSIZE;
    unsigned output_count = 0;

    struct lzw_state dec;
    lzw_state_init(&dec);

    while(get_input_code(&code)) {
        unsigned char *temp_curs = lzw_decode(&dec, code, tempbuf);
        put_output_buf(temp_curs, (temp_end - temp_curs));
    }

Other tips & tricks:

When building, there are two macros that can be overridden to control behavior:

1. You can override the DICTSIZE macro to be any value strictly larger than
   SYMCOUNT. This affects the maximum size of the string dictionary, which may
   have an effect on the level of compression possible.

2. You can override the SYMCOUNT macro to more closely correspond with the
   number of symbols in the alphabet you are compressing. This may help make
   some space in the dictionary for small values of DICTSIZE, or may simply
   be more reflective of the alphabet you are compressing.

Don't be afraid to peek inside the lzw_state struct, as the next_code field
may be useful to pass to your I/O system to help determine the number of bits
to use when emitting or reading the symbol codes.

If the dictionary grows past DICTSIZE, it is reset by being truncated to
SYMCOUNT.
